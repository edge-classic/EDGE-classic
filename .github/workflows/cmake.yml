name: CMake

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  # The number of days to retain artifacts
  RETENTION_DAYS: 30

jobs:

  build-linux:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-24.04

    steps:
    - uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libsdl2-dev

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DEDGE_SOKOL_GL=ON

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - uses: actions/upload-artifact@v4
      with:
        name: edge-classic-linux
        path: |
          ${{github.workspace}}/autoload
          ${{github.workspace}}/edge_base
          ${{github.workspace}}/edge_defs
          ${{github.workspace}}/edge_fixes
          ${{github.workspace}}/soundfont
          ${{github.workspace}}/edge-classic
        retention-days: ${{env.RETENTION_DAYS}}

  build-mingw32:
    runs-on: ubuntu-24.04

    steps:
    - uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libsdl2-dev mingw-w64

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DCMAKE_TOOLCHAIN_FILE=cmake/Toolchain-mingw32.cmake

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - uses: actions/upload-artifact@v4
      with:
        name: edge-classic-mingw32
        path: |
          ${{github.workspace}}/autoload
          ${{github.workspace}}/edge_base
          ${{github.workspace}}/edge_defs
          ${{github.workspace}}/edge_fixes
          ${{github.workspace}}/soundfont
          ${{github.workspace}}/edge-classic.exe
          ${{github.workspace}}/*.dll
        retention-days: ${{env.RETENTION_DAYS}}

  build-msvc:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      - name: Configure CMake MSVC
        run: mkdir build && cd build && cmake .. -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DEDGE_SOKOL_D3D11=ON
      - name: Build MSVC
        run: cmake --build build --config ${{env.BUILD_TYPE}}
      - uses: actions/upload-artifact@v4
        with:
          name: edge-classic-msvc
          path: |
            autoload
            edge_base
            edge_defs
            edge_fixes
            soundfont
            edge-classic.exe
            *.dll
          retention-days: ${{env.RETENTION_DAYS}}

  build-macos:
    runs-on: macos-latest

    steps:
    - uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        brew install sdl2

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DEDGE_SOKOL_GL=ON

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - uses: actions/upload-artifact@v4
      with:
        name: edge-classic-macos
        path: |
          ${{github.workspace}}/autoload
          ${{github.workspace}}/edge_base
          ${{github.workspace}}/edge_defs
          ${{github.workspace}}/edge_fixes
          ${{github.workspace}}/soundfont
          ${{github.workspace}}/edge-classic
        retention-days: ${{env.RETENTION_DAYS}}

  build-web-player:
    runs-on: ubuntu-24.04
    
    steps:      
    - uses: actions/checkout@v4

    - uses: mymindstorm/setup-emsdk@v14
      with: 
        version: latest
            
    - name: Configure CMake        
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DCMAKE_TOOLCHAIN_FILE="${EMSDK}/upstream/emscripten/cmake/Modules/Platform/Emscripten.cmake"

    - name: Setup Preloads
      run: git clone https://github.com/edge-classic/web-player-wads ${{github.workspace}}/web-player-wads && cp ${{github.workspace}}/web-player-wads/freedoom/freedoom2.wad ${{github.workspace}}/web/preload/ && cp ${{github.workspace}}/web-player-wads/blasphemer/blasphem.wad ${{github.workspace}}/web/preload/

    - name: Build
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}
  
    - uses: actions/upload-artifact@v4
      with:
        name: edge-classic-web-player
        path: |
          ${{github.workspace}}/web/site
        retention-days: ${{env.RETENTION_DAYS}}
      